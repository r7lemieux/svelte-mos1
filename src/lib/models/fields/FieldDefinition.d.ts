import type { FieldDefinitionInterface } from './FieldDefinition.interface.js';
import { Rezult } from '../../services/common/message/rezult.js';
import type { ColDef } from 'ag-grid-community';
import type { InputTypes } from '../../services/common/util/dom.utils.js';
export declare class FieldDefinition<T> implements FieldDefinitionInterface<T> {
    name: string;
    type: string;
    description?: string;
    displayName?: string;
    example?: string;
    regex?: RegExp;
    regexFlag?: string;
    minLen: number;
    maxLen: number;
    key?: string;
    inputType: InputTypes;
    gridColDef?: ColDef;
    canBeNull: boolean;
    canBeUndefined: boolean;
    mapValueType?: string;
    constructor(props?: Partial<FieldDefinition<any>>);
    init(props: any): void;
    validate(): void;
    static from: (fieldDef0: FieldDefinition<any>, props?: Partial<FieldDefinitionInterface<any>>) => FieldDefinition<any>;
    clone(): FieldDefinition<any>;
    chainSetName(name: string): FieldDefinition<any>;
    parse(v: any): any | null;
    gridToString(gridFields: any): any;
    valueToString(v: any): any;
    documentToValue(v: any): any;
    valueToDocument(v: any): any;
    getDisplayName(): string;
    getColumnName(): string;
    getDescription(): string;
    validateValue(val0: any): Rezult;
    validateString(str: any): Rezult;
    buildColDef(): ColDef;
}
export declare const from: (fieldDef0: FieldDefinition<any>, props?: Partial<FieldDefinitionInterface<any>>) => FieldDefinition<any>;
