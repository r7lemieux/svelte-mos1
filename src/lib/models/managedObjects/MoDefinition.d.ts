import { Mo } from './Mo.js';
import { FieldDefinition } from '../fields/FieldDefinition.js';
import type { MoDefinitionInterface } from './MoDefinitionInterface.js';
import type { MoMetaInterface } from './MoMetaInterface.js';
import type { MoInterface } from './MoInterface.js';
export declare class MoDefinition implements MoDefinitionInterface {
    id: string;
    name: string;
    dbName: string;
    displayName?: string;
    keyFieldnames: string[][];
    fieldDefs: Map<string, FieldDefinition<any>>;
    gridFieldnames?: string[];
    moClass: typeof Mo;
    hasId: boolean;
    idType: 'number' | 'string';
    gdriveFilePath?: string;
    gdriveFileId?: string | null;
    canCreate: boolean;
    constructor(name: string, moClass?: typeof Mo);
    init(): void;
    static fromProps: (props: any) => MoDefinition;
    getDisplayName: () => string;
    getDbName: () => string;
    getFieldNames: () => string[];
    getMoClass: () => typeof Mo;
    initFieldDefs(): void;
    addFieldDef: (fieldDef: any) => any;
    addFieldDefsFromNames: (fieldnames: string[]) => void;
    deriveFieldDefsFromMo(): FieldDefinition<any>[];
    deriveFieldDefsFromFieldnames: (fieldnames: string[]) => FieldDefinition<any>[];
    extractFieldnamesFromMo(): string[];
    newMo: () => MoInterface;
    objToMo: (obj: object, moMeta: MoMetaInterface) => MoInterface;
    documentToMo: (doc: any) => MoInterface;
    moToObj: (mo: any) => any;
    moToDocument: (mo: any) => any;
}
declare const defaultMoDef: MoDefinition;
declare const moDefDef: MoDefinition;
export { defaultMoDef, moDefDef };
